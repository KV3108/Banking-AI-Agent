{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c43e464b-b28b-43fb-9bd4-ef9d5a5d676a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fraud Detection Model, Customer Segmentation, Churn Prediction Model, Transaction Risk Scoring\n",
    "import os\n",
    "from pathlib import Path\n",
    "project_name = 'AI Agent Banking'\n",
    "list_of_files = [\n",
    "    f\"{project_name}/__init__.py\",\n",
    "    f\"{project_name}/Fraud_Detection_Components/__init__.py\",\n",
    "    f\"{project_name}/Fraud_Detection_Components/data_ingestion.py\",\n",
    "    f\"{project_name}/Fraud_Detection_Components/data_validation.py\",\n",
    "    f\"{project_name}/Fraud_Detection_Components/data_transformation.py\",\n",
    "    f\"{project_name}/Fraud_Detection_Components/model_trainer.py\",\n",
    "    f\"{project_name}/Fraud_Detection_Components/model_evaluation.py\",\n",
    "    f\"{project_name}/Fraud_Detection_Components/model pusher.py\",\n",
    "\n",
    "    f\"{project_name}/Customer_Segmentation_Components/__init__.py\",\n",
    "    f\"{project_name}/Customer_Segmentation_Components/data_ingestion.py\",\n",
    "    f\"{project_name}/Customer_Segmentation_Components/data_validation.py\",\n",
    "    f\"{project_name}/Customer_Segmentation_Components/data_transformation.py\",\n",
    "    f\"{project_name}/Customer_Segmentation_Components/model_trainer.py\",\n",
    "    f\"{project_name}/Customer_Segmentation_Components/model_evaluation.py\",\n",
    "    f\"{project_name}/Customer_Segmentation_Components/model pusher.py\",\n",
    "\n",
    "    f\"{project_name}/Churn_Prediction_Components/__init__.py\",\n",
    "    f\"{project_name}/Churn_Prediction_Components/data_ingestion.py\",\n",
    "    f\"{project_name}/Churn_Prediction_Components/data_validation.py\",\n",
    "    f\"{project_name}/Churn_Prediction_Components/data_transformation.py\",\n",
    "    f\"{project_name}/Churn_Prediction_Components/model_trainer.py\",\n",
    "    f\"{project_name}/Churn_Prediction_Components/model_evaluation.py\",\n",
    "    f\"{project_name}/Churn_Prediction_Components/model pusher.py\",\n",
    "\n",
    "    f\"{project_name}/Transaction_Risk_Components/__init__.py\",\n",
    "    f\"{project_name}/Transaction_Risk_Components/data_ingestion.py\",\n",
    "    f\"{project_name}/Transaction_Risk_Components/data_validation.py\",\n",
    "    f\"{project_name}/Transaction_Risk_Components/data_transformation.py\",\n",
    "    f\"{project_name}/Transaction_Risk_Components/model_trainer.py\",\n",
    "    f\"{project_name}/Transaction_Risk_Components/model_evaluation.py\",\n",
    "    f\"{project_name}/Transaction_Risk_Components/model pusher.py\",\n",
    "\n",
    "    f\"{project_name}/AI_Agent_Integration/__init__.py\",\n",
    "    f\"{project_name}/AI_Agent_Integration/perception.py\",\n",
    "    f\"{project_name}/AI_Agent_Integration/processing_reasoning.py\",\n",
    "    f\"{project_name}/AI_Agent_Integration/action.py\",\n",
    "    f\"{project_name}/AI_Agent_Integration/make_decisions.py\",\n",
    "    f\"{project_name}/AI_Agent_Integration/learning_adaptation.py\",\n",
    "\n",
    "    f\"{project_name}/Improving_AI_Agent/__init__.py\",\n",
    "    f\"{project_name}/Improving_AI_Agent/real_time_data_ingestion.py\",\n",
    "    f\"{project_name}/Improving_AI_Agent/DQN_model_training.py\",\n",
    "    f\"{project_name}/Improving_AI_Agent/DQN_model_evaluation.py\",\n",
    "  \n",
    "    f\"{project_name}/Integrating_real_time_feedback_to_AI_Agent/__init__.py\",\n",
    "    f\"{project_name}/Integrating_real_time_feedback_to_AI_Agent/feedback_loop.py\",\n",
    "    f\"{project_name}/Integrating_real_time_feedback_to_AI_Agent/testing.py\",\n",
    "\n",
    "    f\"{project_name}/Configuration/__init__.py\",\n",
    "    f\"{project_name}/Constants/__init__.py\",\n",
    "    f\"{project_name}/entity/__init__.py\",\n",
    "    f\"{project_name}/entity/config_entity.py\",\n",
    "    f\"{project_name}/entity/artifact_entity.py\",\n",
    "    f\"{project_name}/exception/__init__.py\",\n",
    "    f\"{project_name}/logger/__init__.py\",\n",
    "\n",
    "    f\"{project_name}/pipeline/__init__.py\",\n",
    "    f\"{project_name}/pipeline/training_pipeline.py\",\n",
    "    f\"{project_name}/pipeline/prediction_pipeline.py\",\n",
    "    \n",
    "    f\"{project_name}/utils/__init__.py\",\n",
    "    f\"{project_name}/utils/main_utils.py\",\n",
    "\n",
    "    f\"{project_name}/model_monitoring/__init__.py\",\n",
    "    f\"{project_name}/model_monitoring/log_performance.py\",\n",
    "    f\"{project_name}/model_monitoring/detect_data_drift.py\",\n",
    "    f\"{project_name}/model_monitoring/detect_model_drift.py\",\n",
    "\n",
    "    \"app.py\",\n",
    "    \"model_retraining.py\",\n",
    "    \"requirements.txt\",\n",
    "    \"Dockerfile\",\n",
    "    \".dockerignore\",\n",
    "    \"demo.py\",\n",
    "    \"setup.py\",\n",
    "    \"config/model.yaml\",\n",
    "    \"config/schema.yaml\",\n",
    "]\n",
    "\n",
    "\n",
    "\n",
    "for filepath in list_of_files:\n",
    "    filepath = Path(filepath)\n",
    "    filedir, filename = os.path.split(filepath)\n",
    "    if filedir != \"\":\n",
    "        os.makedir(filedir, exist_ok=True)\n",
    "    if (not os,path.exists(filepath)) or (os.path.getsize(filepath) == 0):\n",
    "        with open(filepath, \"w\") as f:\n",
    "            pass\n",
    "    else:\n",
    "        print(f\"file is aslready present at: {filepath}\")\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d8a65ae-98b5-4b6a-9b0e-b490dbef5a80",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80410e2b-d8be-431e-8782-0f2a4c9b9781",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d235cc34-a421-4cd5-8504-cdce1b1ff579",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (cuda)",
   "language": "python",
   "name": "cuda"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
